#! /usr/bin/env node

const fs = require('fs').promises;
const path = require('path');
const { execFile } = require('child_process');

const map = (fn) => (list) => {
	return list.map(fn);
};

const filterMap = (fn) => (list) => {
	return map(fn)(list.filter(fn));
};

const unique = (list) => {
	return [...new Set(list)];
};

const inspect = (fn) => (value) => {
	return (fn(value), value);
}

const resolve = (file) => {
	return path.resolve(__dirname, '..', 'plugins', file);
};

const extractFromLine = (line) => {
	const [owner, repo] = line.trim().split('/');

	if (line.startsWith('#') || !owner || !repo) {
		return false;
	}

	return { owner, repo };
};

const prefetchGit = ({ owner, repo }) => {
	const url = `https://github.com/${owner}/${repo}`;

	return new Promise((resolve, reject) => {
		console.info(`Fetching ${url}...`);

		execFile('nix-prefetch-git', ['--fetch-submodules', url], (error, stdout) => {
			if (error) {
				return reject(error);
			}

			const { rev, sha256 } = JSON.parse(stdout);

			console.info(`Fetched ${url}!`);

			return resolve({ rev, sha256, owner, repo });
		});
	});
};

const format = json => {
	return JSON.stringify(json, null, 2);
};

fs.readFile(resolve('plugins.txt'), { encoding: 'utf8' })
	.then((content) => content.split('\n'))
	.then(filterMap(extractFromLine))
	.then(unique)
	.then(inspect(console.log))
	.then(map(prefetchGit))
	.then(Promise.all.bind(Promise))
	.then(format)
	.then(text => fs.writeFile(resolve('plugins.json'), text, 'utf8'))
	.then(() => console.log('Finished!'));
